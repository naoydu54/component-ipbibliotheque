require("./helper");var fs=require("fs");var path=require("path");var child_process=require("child_process");var _files=path.join(__dirname,"_files");var cliTxt=path.resolve(_files,"cli.txt");var cliPartialsTxt=path.resolve(_files,"cli_with_partials.txt");var moduleVersion=require("../package").version;function changeForOS(a){if(process.platform==="win32"){return a.replace(/bin\/mustache/g,"node bin\\mustache").replace(/\bcat\b/g,"type").replace(/\//g,"\\")}return a}function exec(){arguments[0]=changeForOS(arguments[0]);return child_process.exec.apply(child_process,arguments)}describe("Mustache CLI",function(){var a;it("writes syntax hints into stderr when runned with wrong number of arguments",function(b){exec("bin/mustache",function(e,c,d){assert.notEqual(d.indexOf("Syntax"),-1);b()})});it("writes hints about JSON parsing errors when given invalid JSON",function(b){exec('echo {name:"lebron"} | bin/mustache - test/_files/cli.mustache',function(e,c,d){assert.notEqual(d.indexOf("Shooot, could not parse view as JSON"),-1);b()})});it("writes module version into stdout when runned with --version",function(b){exec("bin/mustache --version",function(e,c,d){assert.notEqual(c.indexOf(moduleVersion),-1);b()})});it("writes module version into stdout when runned with -v",function(b){exec("bin/mustache -v",function(e,c,d){assert.notEqual(c.indexOf(moduleVersion),-1);b()})});describe("without partials",function(){before(function(b){fs.readFile(cliTxt,function c(d,e){if(d){return b(d)}a=e.toString();b()})});it("writes rendered template into stdout when successfull",function(b){exec("bin/mustache test/_files/cli.json test/_files/cli.mustache",function(e,c,d){assert.equal(e,null);assert.equal(d,"");assert.equal(c,a);b()})});it("writes rendered template into the file specified by the third argument",function(b){var c="test/_files/cli_output.txt";exec("bin/mustache test/_files/cli.json test/_files/cli.mustache "+c,function(f,d,e){assert.equal(f,null);assert.equal(e,"");assert.equal(d,"");assert.equal(fs.readFileSync(c),a);fs.unlink("test/_files/cli_output.txt");b()})});it('reads view data from stdin when first argument equals "-"',function(b){exec("cat test/_files/cli.json | bin/mustache - test/_files/cli.mustache",function(e,c,d){assert.equal(e,null);assert.equal(d,"");assert.equal(c,a);b()})});it("writes it couldnt find template into stderr when second argument doesnt resolve to a file",function(b){exec("bin/mustache test/_files/cli.json test/_files/non-existing-template.mustache",function(e,c,d){assert.isOk(/Could not find file: .+non-existing-template\.mustache/.test(d));b()})});it("writes it couldnt find view into stderr when first argument doesnt resolve to a file",function(b){exec("bin/mustache test/_files/non-existing-view.json test/_files/cli.mustache",function(e,c,d){assert.isOk(/Could not find file: .+non-existing-view\.json/.test(d));b()})})});describe("with partials",function(){before(function(b){fs.readFile(cliPartialsTxt,function c(d,e){if(d){return b(d)}a=e.toString();b()})});it("writes rendered template with partials into stdout",function(b){exec("bin/mustache test/_files/cli_with_partials.json test/_files/cli_with_partials.mustache -p test/_files/cli.mustache -p test/_files/comments.mustache",function(e,c,d){assert.equal(e,null);assert.equal(d,"");assert.equal(c,a);b()})});it("writes rendered template with partials when partials args before required args",function(b){exec("bin/mustache -p test/_files/cli.mustache -p test/_files/comments.mustache test/_files/cli_with_partials.json test/_files/cli_with_partials.mustache",function(e,c,d){assert.equal(e,null);assert.equal(d,"");assert.equal(c,a);b()})})})});