require("./helper");var Context=Mustache.Context;describe("A new Mustache.Context",function(){var a;beforeEach(function(){a=new Context({name:"parent",message:"hi",a:{b:"b"}})});it("is able to lookup properties of its own view",function(){assert.equal(a.lookup("name"),"parent")});it("is able to lookup nested properties of its own view",function(){assert.equal(a.lookup("a.b"),"b")});describe("when pushed",function(){beforeEach(function(){a=a.push({name:"child",c:{d:"d"}})});it("returns the child context",function(){assert.equal(a.view.name,"child");assert.equal(a.parent.view.name,"parent")});it("is able to lookup properties of its own view",function(){assert.equal(a.lookup("name"),"child")});it("is able to lookup properties of the parent context's view",function(){assert.equal(a.lookup("message"),"hi")});it("is able to lookup nested properties of its own view",function(){assert.equal(a.lookup("c.d"),"d")});it("is able to lookup nested properties of its parent view",function(){assert.equal(a.lookup("a.b"),"b")})})});describe("A Mustache.Context",function(){var a;describe("with an empty string in the lookup chain",function(){var b,c;beforeEach(function(){b={a:""};b.a.b="value";c=new Context(b)});it("is able to lookup a nested property",function(){assert.equal(c.lookup("a.b"),b.a.b)})})});